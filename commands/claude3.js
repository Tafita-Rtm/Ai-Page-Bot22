const axios = require('axios');
const path = require('path');

module.exports = {
  name: 'claude',
  description: 'Analyse une image avec GPT-4o ou pose une question',
  author: 'Deku (rest api)',
  
  async execute(senderId, args, pageAccessToken, sendMessage) {
    try {
      // Si le message contient une r√©f√©rence √† une image (par exemple r√©ponse √† une image)
      if (args[0] && args[0].startsWith('http')) {
        const imageUrl = args[0]; // L'URL de l'image est pass√©e comme premier argument
        const query = args.slice(1).join(' ') || "D√©cris cette image."; // Le reste des arguments est la question
        await sendMessage(senderId, { text: 'üîç Analyse de l\'image en cours... ‚è≥' }, pageAccessToken);
        
        const geminiUrl = `https://deku-rest-api.gleeze.com/gemini?prompt=${encodeURIComponent(query)}&url=${encodeURIComponent(imageUrl)}`;
        const { data } = await axios.get(geminiUrl);

        // Formatage de la r√©ponse de GPT-4o
        const formattedResponse = formatResponse(data.gemini);
        await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
      } else {
        const prompt = args.join(' ');
        
        if (!prompt) {
          return sendMessage(senderId, { text: "Veuillez entrer une question valide ou une URL d'image." }, pageAccessToken);
        }

        // Envoyer un message indiquant que GPT-4o est en train de r√©pondre √† la question
        await sendMessage(senderId, { text: 'üí¨ *GPT-4o est en train de te r√©pondre* ‚è≥...\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' }, pageAccessToken);
        
        const apiUrl = `https://deku-rest-apis.ooguy.com/api/gpt-4o?q=${encodeURIComponent(prompt)}&uid=100${senderId}`;
        const response = await axios.get(apiUrl);
        const text = response.data.result;

        // Cr√©er un style avec un contour pour la r√©ponse de GPT-4o
        const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                                  `‚ú®GPT-4o miniü§ñüá≤üá¨\n\n${text}\n` +
                                  `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

        // G√©rer les r√©ponses longues de plus de 2000 caract√®res
        const maxMessageLength = 2000;
        if (formattedResponse.length > maxMessageLength) {
          const messages = splitMessageIntoChunks(formattedResponse, maxMessageLength);
          for (const message of messages) {
            await sendMessage(senderId, { text: message }, pageAccessToken);
          }
        } else {
          await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
        }
      }
    } catch (error) {
      console.error('Erreur lors de l\'appel √† l\'API GPT-4o:', error);
      // Message de r√©ponse d'erreur
      await sendMessage(senderId, { text: 'D√©sol√©, une erreur est survenue. Veuillez r√©essayer plus tard.' }, pageAccessToken);
    }
  }
};

// Fonction pour formater la r√©ponse
function formatResponse(response) {
  return response.replace(/\*\*(.*?)\*\*/g, (match, p1) => global.convertToGothic(p1));
}

// Fonction pour d√©couper les messages en morceaux de 2000 caract√®res
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
