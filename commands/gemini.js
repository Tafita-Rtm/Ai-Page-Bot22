const axios = require('axios');

module.exports = {
  name: 'gemini',
  description: 'Analyse une image et renvoie une description directement',
  author: 'Deku (adapt√© de vex_kshitiz)',
  
  async execute(senderId, event, pageAccessToken, sendMessage) {
    const prompt = event.body || ''; // le texte du message original (s'il y en a un)
    const attachments = event.attachments || []; // v√©rifier s'il y a des pi√®ces jointes (images)

    // V√©rification des pi√®ces jointes (images)
    if (attachments.length === 0 || !attachments[0].url) {
      return sendMessage(senderId, { text: "Veuillez joindre une image pour analyse." }, pageAccessToken);
    }

    const photoUrl = attachments[0].url; // URL de l'image
    console.log("URL de l'image re√ßue :", photoUrl); // Log pour v√©rifier l'URL

    try {
      // Envoyer un message indiquant que l'analyse de l'image est en cours
      await sendMessage(senderId, { text: 'üí¨ *Analyse de l\'image en cours* ‚è≥...\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ' }, pageAccessToken);

      // Appel de l'API pour analyser l'image
      const apiUrl = `https://sandipbaruwal.onrender.com/gemini2?prompt=${encodeURIComponent(prompt)}&url=${encodeURIComponent(photoUrl)}`;
      const response = await axios.get(apiUrl);

      // V√©rifier si la r√©ponse contient une description
      if (!response.data || !response.data.answer) {
        throw new Error('L\'API n\'a pas retourn√© de description valide.');
      }

      const description = response.data.answer;

      // Cr√©er un style avec un contour pour la description de l'image
      const formattedResponse = `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n` +
                                `‚ú®R√©sultat de l'analyse ü§ñ\n\n${description}\n` +
                                `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚òÖ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

      // G√©rer les r√©ponses longues de plus de 2000 caract√®res
      const maxMessageLength = 2000;
      if (formattedResponse.length > maxMessageLength) {
        const messages = splitMessageIntoChunks(formattedResponse, maxMessageLength);
        for (const message of messages) {
          await sendMessage(senderId, { text: message }, pageAccessToken);
        }
      } else {
        await sendMessage(senderId, { text: formattedResponse }, pageAccessToken);
      }

    } catch (error) {
      console.error('Erreur lors de l\'appel √† l\'API d\'analyse d\'image:', error.response ? error.response.data : error.message);
      // Message de r√©ponse d'erreur
      await sendMessage(senderId, { text: 'D√©sol√©, une erreur est survenue lors de l\'analyse de l\'image. Veuillez r√©essayer plus tard.' }, pageAccessToken);
    }
  }
};

// Fonction pour d√©couper les messages en morceaux de 2000 caract√®res
function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
